% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/provParse.R
\name{get.environment}
\alias{get.environment}
\alias{get.libs}
\alias{get.tool.info}
\alias{get.scripts}
\alias{get.proc.nodes}
\alias{get.data.nodes}
\alias{get.func.nodes}
\alias{get.proc.proc}
\alias{get.data.proc}
\alias{get.proc.data}
\alias{get.func.proc}
\alias{get.func.lib}
\alias{get.input.files}
\alias{get.output.files}
\alias{get.variables.set}
\alias{get.variables.used}
\title{Provenance access functions}
\usage{
get.environment()

get.libs()

get.tool.info()

get.scripts()

get.proc.nodes()

get.data.nodes()

get.func.nodes()

get.proc.proc()

get.data.proc()

get.proc.data()

get.func.proc()

get.func.lib()

get.input.files()

get.output.files()

get.variables.set()

get.variables.used()
}
\value{
All access functions return NULL if there is no parsed provenance.  If parsed provenance
  exists, but there is no provenance for the type of information requested, such as no input 
  files, an empty data frame is returned.

get.environment returns a data frame containing information about how the provenance was collected.
   The data frame has 2 columns:  label and value.  The labels are: 
   \itemize{
   \item {name} whose value will always be "environment"
   \item {architecture}
   \item {operatingSystem}
   \item {language}
   \item {langVersion}
   \item {script} {- the absolute path to the script executed}
   \item {scriptTimeStamp} {- when the script was last modified}
   \item {workingDirectory}
   \item {ddgDirectory} {- where the provenance is stored}
   \item {ddgTimeStamp} {- when the provenance was collected}
   \item {hashAlgorithm}
   }
   Returns NULL
   if there is no provenance available.

get.libs returns a data frame describing the libraries used by the 
  script.  It contains 3 columns:  id, name, and version.  Returns NULL
   if there is no provenance available.

get.tool.info returns a data frame describing the tool that 
  collected the provenance.  It contains 3 columns:  tool.name, tool.version
  and json.version.  Returns NULL
  if there is no provenance available.

get.scripts returns a data frame identifying all the scripts executed.  The main script
   will be first, followed by all sourced scripts.  The data frame contains 
   2 columns:  name and timestamp (when the script was last modified).  Returns NULL
   if there is no provenance available.

get.proc.nodes returns a data frame identifying all the procedural nodes executed.  
   These are represented in PROV-JSON as activities and include nodes
   corresponding to lines of code, start or finish nodes that surround
   blocks of code, and nodes to represent the binding of function arguments
   to parameters.  The data frame contains 
   8 columns:  
   \itemize{
     \item{id} {- a unique id}
     \item{name} {- a description of what the node represents.  Often this is a line of code from
       the script, perhaps shortened}
     \item{type} {- one of Operation, Binding, Start, Finish, or Incomplete}
     \item{elapsedTime} {- when this executed relative to the start of the script}
     \item {scriptNum} {- a number identifing the script it comes from, with script 0 being the main
       script}
     \item {startLine} {- the line in the script this corresponds to, which may be NA, and the following
       other position infofmation}
     \item {startCol}
     \item {endLine}
     \item {endCol}
   }
   Returns NULL
   if there is no provenance available.

get.data.nodes returns a data frame with an entry for each data node
  in the provenance.  The data frame contains the following columns:
  \itemize{
     \item {id} {- a unique id}
			\item {name} {- the descriptive name for the node, which is generally a variable name, file name, or URL}
			\item {value} {- either a text value (possible shortened) or the name of a file where the value is stored}
			\item {valType} {- a description of the value's type, including its container, dimensions and member types}
			\item {type} {- the type of the node, one of Data, Snapshot, File, URL, Exception, or Device}
			\item {scope} {- a hex number identifying the scope for node's of type Data or Snapshot}
			\item {fromEnv} {- a logical value.  If true, it means the variable had a value before the script began execution}
			\item {hash} {- the hash value for File nodes}
			\item {timestamp} {- the time at which the node was created}
			\item {location} {- for file nodes, the absolute path to the file}
  }
  Returns NULL
   if there is no provenance available.

get.func.nodes returns a data frame containing information about the functions
  used from other libraries within the script.  The data frame has 2 columns:  id 
  (a unique id) and name (the name of the function called).  Returns NULL
  if there is no provenance available.  Returns an empty data frame if there is
  provenance but it contains no calls to externally-defined functions.

get.proc.proc returns a data frame containing information about the edges
  that go between two procedural nodes.  This edges indicate a control-flow relationship
  between the two activities.  The data frame has 3 columns:  id 
  (a unique id), informant (the tail of the edge), and informed (the head of the edge).  Returns NULL
   if there is no provenance available.

get.data.proc returns a data frame containing information about the edges
  that go from data nodes to procedural nodes.  These edges indicate an input relationship
  where the data is used by the activity.  The data frame has 3 columns:  id 
  (a unique id), entity (the input data), and activity (the procedural node that uses the
  data).  Returns NULL
   if there is no provenance available.

get.proc.data returns a data frame containing information about the edges
  that go from procedural nodes to data nodes.  These edges indicate an output relationship
  where the data is produed by the activity.  The data frame has 3 columns:  id 
  (a unique id), entity (the output data), and activity (the procedural node that produces the
  data).  Returns NULL
   if there is no provenance available.

get.proc.func returns a data frame containing information about where externally-defined
  functions are used in the script.  The data frame has 3 columns:  func_id (the id of the
  function node), activity (the procedural node 
  that calls the function) and function (the function's name).  Returns NULL
   if there is no provenance available.

get.func.lib returns a data frame containing information about what
  libraries externally-defined
  functions come from.  The data frame has 3 columns:  func_id (the id of the
  function node), library (a library node)
  and function (the name of a function).  Returns NULL
   if there is no provenance available.

A data frame containing a subset of the data nodes that correspond to files or URLs that are 
  read by the script.  Returns NULL
   if there is no provenance available.

A data frame containing a subset of the data nodes that correspond to files that are 
  written by the script.  Returns NULL
   if there is no provenance available.

A data frame containing a subset of the data nodes that correspond to variables
  assigned to in the script.  Returns NULL
   if there is no provenance available.

A data frame containing a subset of the data nodes that correspond to variables
  whose values are used in the script.  Returns NULL
   if there is no provenance available.
}
\description{
The provParserR package provides a parser and access functions to retrieve provenance information 
from the execution of an R script.  These functions work with provenance 
collected by provR and RDataTracker.  
The function prov.parse must be called before calling any of the access functions.
}
\examples{
prov.parse(system.file ("testdata", "prov.json", package="provParseR", mustWork=TRUE))
get.proc.nodes()
get.input.files()
get.output.files()
get.variables.set()
get.variables.used()
get.data.nodes()
get.func.nodes()
get.proc.proc()
get.data.proc()
get.proc.data()
get.func.proc()
get.func.lib()
get.libs()
get.scripts()
get.environment()

}
\seealso{
\code{\link{prov.parse}}
}
